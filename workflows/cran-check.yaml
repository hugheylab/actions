# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on: push

name: cran-check

jobs:
  check_version_number:
    runs-on: ubuntu-latest
    name: Check version numbers of packages
    outputs:
        matrix: ${{ steps.get_packages.outputs.value }}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes
    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - id: get_packages
        run: |
          install.packages('data.table')
          library('data.table')

          # Read files in drat folder, extract names, and filter to max versions of package found.
          dratPackages = data.table(filename = list.files(file.path('src', 'contrib')))
          dratPackages[, filename := gsub('.tar.gz', '', filename, fixed = TRUE)]
          dratPackages = dratPackages[, c('name', 'version') := tstrsplit(filename, '_', fixed = TRUE)]
          dratPackages = dratPackages[
            !is.na(version), .(drat_version = max(version)), by = name]

          # Establish version levels and split out into separate columns
          versionLevels = c('major', 'minor', 'patch', 'dev')
          dratPackages[, (paste0('drat_', versionLevels)) :=
                        tstrsplit(drat_version, '.', fixed = TRUE, type.convert = TRUE)]

          # Read in packages availability on CRAN and merge with drat data.table
          cranPackages = as.data.table(available.packages(repos = 'https://cran.rstudio.com/'))
          cranPackages = cranPackages[, .(name = Package, cran_version = Version)]
          packages = merge(dratPackages, cranPackages, by = 'name')

          # Split out CRAN version levels (assuming no dev level exists on CRAN)
          packages[, (paste0('cran_', versionLevels[1:3])) :=
                    tstrsplit(cran_version, '.', fixed = TRUE, type.convert = TRUE)]

          # Figure out which rows need update on CRAN
          packages[, needs_cran_update := 0]
          packages[
            drat_major > cran_major |
            drat_minor > cran_minor + 2 |
            drat_patch > cran_patch + 5,
            needs_cran_update := 1]

          packages = packages[needs_cran_update == 1]

          needsUpdatesOutput = paste0(packages$name, '---', packages$drat_version, '---', packages$cran_version, collapse = '", "')
          needsUpdatesOutput = paste0('["', needsUpdatesOutput, '"]')

          s = sprintf('echo \'::set-output name=value::%s\'', needsUpdatesOutput)
          system(s)

        shell: Rscript {0}


  create_issue:
    needs: [ check_version_number ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    strategy:
      matrix:
        value: ${{fromJson(needs.check_version_number.outputs.matrix)}}
    name: Create issue for packages ${{ matrix.value }}
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Split package_string
        id: split-string
        run: |
          PACKAGE_NAME=$(echo ${{ matrix.value }} | awk 'BEGIN {FS="---" } ; { print $1 }')
          echo "::set-output name=PACKAGE_NAME::$PACKAGE_NAME"
          DRAT_VERSION=$(echo ${{ matrix.value }} | awk 'BEGIN {FS="---" } ; { print $2 }')
          echo "::set-output name=DRAT_VERSION::$DRAT_VERSION"
          CRAN_VERSION=$(echo ${{ matrix.value }} | awk 'BEGIN {FS="---" } ; { print $3 }')
          echo "::set-output name=CRAN_VERSION::$CRAN_VERSION"
        shell: bash

      - name: Create an issue
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.github_token }}
          title: ${{ steps.split-string.outputs.PACKAGE_NAME }} needs CRAN Update
          body: |
            ${{ steps.split-string.outputs.PACKAGE_NAME }} needs a CRAN update.
            Drat version: ${{ steps.split-string.outputs.DRAT_VERSION }}
            CRAN version: ${{ steps.split-string.outputs.CRAN_VERSION }}
